{"ast":null,"code":"var _jsxFileName = \"/Users/oscarholt/Desktop/Workspace/typing-test/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from \"react\";\nimport randomWords from \"random-words\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NUMB_OF_WORDS = 200;\nconst SECONDS = 60;\n\nfunction App() {\n  _s();\n\n  const [words, setWords] = useState([]);\n  const [countDown, setCountDown] = useState(SECONDS);\n  const [currentInput, setCurrentInput] = useState(\"\");\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [correct, setCorrect] = useState(0);\n  const [incorrect, setIncorrect] = useState(0);\n  const [status, setStatus] = useState(\"waiting\");\n  const textInput = null;\n  useEffect(() => {\n    //Sets our words state to be an array of generated words using the random-words package\n    setWords(generateWords());\n  }, []);\n  useEffect(() => {\n    if (status === \"started\") {\n      textInput.current.focus();\n    }\n  }, [status]);\n\n  function generateWords() {\n    // Returns an array of random words\n    return new Array(NUMB_OF_WORDS).fill(null).map(() => randomWords());\n  }\n\n  function start() {\n    if (status === \"finished\") {\n      setWords(generateWords());\n      setCurrentWordIndex(0);\n      setCorrect(0);\n      setIncorrect(0);\n    }\n\n    if (status !== \"started\") {\n      setStatus(\"started\");\n      let interval = setInterval(() => {\n        setCountDown(prevCountDown => {\n          if (prevCountDown === 0) {\n            clearInterval(interval);\n            setStatus(\"finished\");\n            setCurrentInput(\"\");\n            return SECONDS;\n          } else {\n            return prevCountDown - 1;\n          }\n        });\n      }, 1000);\n    }\n  }\n\n  function handleKeyDown(_ref) {\n    let {\n      keyCode\n    } = _ref;\n\n    if (keyCode === 32) {\n      checkMatch();\n      setCurrentInput(\"\");\n      setCurrentWordIndex(currentWordIndex + 1);\n    }\n  }\n\n  function checkMatch() {\n    const wordToCompare = words[currentWordIndex];\n    const doesMatch = wordToCompare === currentInput.trim();\n\n    if (doesMatch) {\n      setCorrect(correct + 1);\n    } else {\n      setIncorrect(incorrect + 1);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"is-size-1 has-text-centered has-text-primary\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: countDown\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control is-expanded section\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: textInput,\n        disabled: status !== \"started\",\n        type: \"text\",\n        className: \"input\",\n        onKeyDown: handleKeyDown,\n        value: currentInput,\n        onChange: e => setCurrentInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button is-info is-fullwidth\",\n        onClick: start,\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), status === \"started\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-content\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content\",\n            children: words.map((word, i) => {\n              return /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: word.split(\"\").map((char, idx) => /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: char\n                  }, idx, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 108,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 106,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \" \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 111,\n                  columnNumber: 23\n                }, this)]\n              }, i, true, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this), status === \"finished\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"columns\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"column has-text-centered\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"is-size-5\",\n            children: \"Words Per Minute:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"has-text-primary is-size-1\",\n            children: correct\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"column has-text-centered\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"is-size-5\",\n            children: \"Accuracy:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"has-text-info is-size-1\",\n            children: Math.round(correct / (correct + incorrect) * 100) + \"%\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Rf5g75cVmA05WDixvGtN8Oh1XVQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/oscarholt/Desktop/Workspace/typing-test/src/App.js"],"names":["useState","useEffect","useRef","randomWords","NUMB_OF_WORDS","SECONDS","App","words","setWords","countDown","setCountDown","currentInput","setCurrentInput","currentWordIndex","setCurrentWordIndex","correct","setCorrect","incorrect","setIncorrect","status","setStatus","textInput","generateWords","current","focus","Array","fill","map","start","interval","setInterval","prevCountDown","clearInterval","handleKeyDown","keyCode","checkMatch","wordToCompare","doesMatch","trim","e","target","value","word","i","split","char","idx","Math","round"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;AACA,OAAOC,WAAP,MAAwB,cAAxB;;AAEA,MAAMC,aAAa,GAAG,GAAtB;AACA,MAAMC,OAAO,GAAG,EAAhB;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAACK,OAAD,CAA1C;AACA,QAAM,CAACM,YAAD,EAAeC,eAAf,IAAkCZ,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACa,gBAAD,EAAmBC,mBAAnB,IAA0Cd,QAAQ,CAAC,CAAD,CAAxD;AACA,QAAM,CAACe,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAM,CAACiB,SAAD,EAAYC,YAAZ,IAA4BlB,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACmB,MAAD,EAASC,SAAT,IAAsBpB,QAAQ,CAAC,SAAD,CAApC;AACA,QAAMqB,SAAS,GAAG,IAAlB;AAEApB,EAAAA,SAAS,CAAC,MAAM;AACd;AACAO,IAAAA,QAAQ,CAACc,aAAa,EAAd,CAAR;AACD,GAHQ,EAGN,EAHM,CAAT;AAKArB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIkB,MAAM,KAAK,SAAf,EAA0B;AACxBE,MAAAA,SAAS,CAACE,OAAV,CAAkBC,KAAlB;AACD;AACF,GAJQ,EAIN,CAACL,MAAD,CAJM,CAAT;;AAMA,WAASG,aAAT,GAAyB;AACvB;AACA,WAAO,IAAIG,KAAJ,CAAUrB,aAAV,EAAyBsB,IAAzB,CAA8B,IAA9B,EAAoCC,GAApC,CAAwC,MAAMxB,WAAW,EAAzD,CAAP;AACD;;AAED,WAASyB,KAAT,GAAiB;AACf,QAAIT,MAAM,KAAK,UAAf,EAA2B;AACzBX,MAAAA,QAAQ,CAACc,aAAa,EAAd,CAAR;AACAR,MAAAA,mBAAmB,CAAC,CAAD,CAAnB;AACAE,MAAAA,UAAU,CAAC,CAAD,CAAV;AACAE,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACD;;AACD,QAAIC,MAAM,KAAK,SAAf,EAA0B;AACxBC,MAAAA,SAAS,CAAC,SAAD,CAAT;AACA,UAAIS,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC/BpB,QAAAA,YAAY,CAAEqB,aAAD,IAAmB;AAC9B,cAAIA,aAAa,KAAK,CAAtB,EAAyB;AACvBC,YAAAA,aAAa,CAACH,QAAD,CAAb;AACAT,YAAAA,SAAS,CAAC,UAAD,CAAT;AACAR,YAAAA,eAAe,CAAC,EAAD,CAAf;AACA,mBAAOP,OAAP;AACD,WALD,MAKO;AACL,mBAAO0B,aAAa,GAAG,CAAvB;AACD;AACF,SATW,CAAZ;AAUD,OAXyB,EAWvB,IAXuB,CAA1B;AAYD;AACF;;AAED,WAASE,aAAT,OAAoC;AAAA,QAAb;AAAEC,MAAAA;AAAF,KAAa;;AAClC,QAAIA,OAAO,KAAK,EAAhB,EAAoB;AAClBC,MAAAA,UAAU;AACVvB,MAAAA,eAAe,CAAC,EAAD,CAAf;AACAE,MAAAA,mBAAmB,CAACD,gBAAgB,GAAG,CAApB,CAAnB;AACD;AACF;;AAED,WAASsB,UAAT,GAAsB;AACpB,UAAMC,aAAa,GAAG7B,KAAK,CAACM,gBAAD,CAA3B;AACA,UAAMwB,SAAS,GAAGD,aAAa,KAAKzB,YAAY,CAAC2B,IAAb,EAApC;;AACA,QAAID,SAAJ,EAAe;AACbrB,MAAAA,UAAU,CAACD,OAAO,GAAG,CAAX,CAAV;AACD,KAFD,MAEO;AACLG,MAAAA,YAAY,CAACD,SAAS,GAAG,CAAb,CAAZ;AACD;AACF;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,8CAAf;AAAA,+BACE;AAAA,oBAAKR;AAAL;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAME;AAAK,MAAA,SAAS,EAAC,6BAAf;AAAA,6BACE;AACE,QAAA,GAAG,EAAEY,SADP;AAEE,QAAA,QAAQ,EAAEF,MAAM,KAAK,SAFvB;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,SAAS,EAAC,OAJZ;AAKE,QAAA,SAAS,EAAEc,aALb;AAME,QAAA,KAAK,EAAEtB,YANT;AAOE,QAAA,QAAQ,EAAG4B,CAAD,IAAO3B,eAAe,CAAC2B,CAAC,CAACC,MAAF,CAASC,KAAV;AAPlC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YANF,eAiBE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,6BACE;AAAQ,QAAA,SAAS,EAAC,6BAAlB;AAAgD,QAAA,OAAO,EAAEb,KAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAjBF,EAsBGT,MAAM,KAAK,SAAX,iBACC;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA,iCACE;AAAK,YAAA,SAAS,EAAC,SAAf;AAAA,sBACGZ,KAAK,CAACoB,GAAN,CAAU,CAACe,IAAD,EAAOC,CAAP,KAAa;AACtB,kCACE;AAAA,wCACE;AAAA,4BACGD,IAAI,CAACE,KAAL,CAAW,EAAX,EAAejB,GAAf,CAAmB,CAACkB,IAAD,EAAOC,GAAP,kBAClB;AAAA,8BAAiBD;AAAjB,qBAAWC,GAAX;AAAA;AAAA;AAAA;AAAA,0BADD;AADH;AAAA;AAAA;AAAA;AAAA,wBADF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBANF;AAAA,iBAAWH,CAAX;AAAA;AAAA;AAAA;AAAA,sBADF;AAUD,aAXA;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAvBJ,EA4CGxB,MAAM,KAAK,UAAX,iBACC;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,0BAAf;AAAA,kCACE;AAAG,YAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAG,YAAA,SAAS,EAAC,4BAAb;AAAA,sBAA2CJ;AAA3C;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAKE;AAAK,UAAA,SAAS,EAAC,0BAAf;AAAA,kCACE;AAAG,YAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAG,YAAA,SAAS,EAAC,yBAAb;AAAA,sBACGgC,IAAI,CAACC,KAAL,CAAYjC,OAAO,IAAIA,OAAO,GAAGE,SAAd,CAAR,GAAoC,GAA/C,IAAsD;AADzD;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YA7CJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA+DD;;GAnIQX,G;;KAAAA,G;AAqIT,eAAeA,GAAf","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nimport randomWords from \"random-words\";\n\nconst NUMB_OF_WORDS = 200;\nconst SECONDS = 60;\n\nfunction App() {\n  const [words, setWords] = useState([]);\n  const [countDown, setCountDown] = useState(SECONDS);\n  const [currentInput, setCurrentInput] = useState(\"\");\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [correct, setCorrect] = useState(0);\n  const [incorrect, setIncorrect] = useState(0);\n  const [status, setStatus] = useState(\"waiting\");\n  const textInput = null;\n\n  useEffect(() => {\n    //Sets our words state to be an array of generated words using the random-words package\n    setWords(generateWords());\n  }, []);\n\n  useEffect(() => {\n    if (status === \"started\") {\n      textInput.current.focus();\n    }\n  }, [status]);\n\n  function generateWords() {\n    // Returns an array of random words\n    return new Array(NUMB_OF_WORDS).fill(null).map(() => randomWords());\n  }\n\n  function start() {\n    if (status === \"finished\") {\n      setWords(generateWords());\n      setCurrentWordIndex(0);\n      setCorrect(0);\n      setIncorrect(0);\n    }\n    if (status !== \"started\") {\n      setStatus(\"started\");\n      let interval = setInterval(() => {\n        setCountDown((prevCountDown) => {\n          if (prevCountDown === 0) {\n            clearInterval(interval);\n            setStatus(\"finished\");\n            setCurrentInput(\"\");\n            return SECONDS;\n          } else {\n            return prevCountDown - 1;\n          }\n        });\n      }, 1000);\n    }\n  }\n\n  function handleKeyDown({ keyCode }) {\n    if (keyCode === 32) {\n      checkMatch();\n      setCurrentInput(\"\");\n      setCurrentWordIndex(currentWordIndex + 1);\n    }\n  }\n\n  function checkMatch() {\n    const wordToCompare = words[currentWordIndex];\n    const doesMatch = wordToCompare === currentInput.trim();\n    if (doesMatch) {\n      setCorrect(correct + 1);\n    } else {\n      setIncorrect(incorrect + 1);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"section\">\n        <div className=\"is-size-1 has-text-centered has-text-primary\">\n          <h2>{countDown}</h2>\n        </div>\n      </div>\n      <div className=\"control is-expanded section\">\n        <input\n          ref={textInput}\n          disabled={status !== \"started\"}\n          type=\"text\"\n          className=\"input\"\n          onKeyDown={handleKeyDown}\n          value={currentInput}\n          onChange={(e) => setCurrentInput(e.target.value)}\n        />\n      </div>\n      <div className=\"section\">\n        <button className=\"button is-info is-fullwidth\" onClick={start}>\n          Start\n        </button>\n      </div>\n      {status === \"started\" && (\n        <div className=\"section\">\n          <div className=\"card\">\n            <div className=\"card-content\">\n              <div className=\"content\">\n                {words.map((word, i) => {\n                  return (\n                    <span key={i}>\n                      <span>\n                        {word.split(\"\").map((char, idx) => (\n                          <span key={idx}>{char}</span>\n                        ))}\n                      </span>\n                      <span> </span>\n                    </span>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n      {status === \"finished\" && (\n        <div className=\"section\">\n          <div className=\"columns\">\n            <div className=\"column has-text-centered\">\n              <p className=\"is-size-5\">Words Per Minute:</p>\n              <p className=\"has-text-primary is-size-1\">{correct}</p>\n            </div>\n            <div className=\"column has-text-centered\">\n              <p className=\"is-size-5\">Accuracy:</p>\n              <p className=\"has-text-info is-size-1\">\n                {Math.round((correct / (correct + incorrect)) * 100) + \"%\"}\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}