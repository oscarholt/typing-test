{"ast":null,"code":"var _jsxFileName = \"/Users/oscarholt/Desktop/Workspace/typing-test/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from \"react\";\nimport randomWords from \"random-words\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NUMB_OF_WORDS = 200;\nconst SECONDS = 60;\n\nfunction App() {\n  _s();\n\n  const [words, setWords] = useState([]);\n  const [countDown, setCountDown] = useState(SECONDS);\n  const [currentInput, setCurrentInput] = useState(\"\");\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [currentCharIndex, setCurrentCharIndex] = useState(-1);\n  const [currentChar, setCurrentChar] = useState(\"\");\n  const [correct, setCorrect] = useState(0);\n  const [incorrect, setIncorrect] = useState(0);\n  const [status, setStatus] = useState(\"waiting\");\n  const textInput = useRef(null);\n  useEffect(() => {\n    //Sets our words state to be an array of generated words using the random-words package\n    setWords(generateWords());\n  }, []);\n  useEffect(() => {\n    if (status === \"started\") {\n      textInput.current.focus();\n    }\n  }, [status]);\n\n  function generateWords() {\n    // Returns an array of random words\n    return new Array(NUMB_OF_WORDS).fill(null).map(() => randomWords());\n  }\n\n  function start() {\n    if (status === \"finished\") {\n      setWords(generateWords());\n      setCurrentWordIndex(0);\n      setCorrect(0);\n      setIncorrect(0);\n      setCurrentCharIndex(-1);\n      setCurrentChar(\"\");\n    }\n\n    if (status !== \"started\") {\n      setStatus(\"started\");\n      let interval = setInterval(() => {\n        setCountDown(prevCountDown => {\n          if (prevCountDown === 0) {\n            clearInterval(interval);\n            setStatus(\"finished\");\n            setCurrentInput(\"\");\n            return SECONDS;\n          } else {\n            return prevCountDown - 1;\n          }\n        });\n      }, 1000);\n    }\n  }\n\n  function handleKeyDown(_ref) {\n    let {\n      keyCode,\n      key\n    } = _ref;\n\n    if (keyCode === 32) {\n      checkMatch();\n      setCurrentInput(\"\");\n      setCurrentWordIndex(currentWordIndex + 1);\n      setCurrentCharIndex(-1);\n    } else if (keyCode === 8) {} else {\n      setCurrentCharIndex(currentCharIndex + 1);\n      setCurrentChar(key);\n    }\n  }\n\n  function checkMatch() {\n    const wordToCompare = words[currentWordIndex];\n    const doesMatch = wordToCompare === currentInput.trim();\n\n    if (doesMatch) {\n      setCorrect(correct + 1);\n    } else {\n      setIncorrect(incorrect + 1);\n    }\n  }\n\n  function getCharClass(wordIdx, charIdx, char) {\n    if (wordIdx === currentWordIndex && charIdx === currentCharIndex && currentChar && status != \"finished\") {\n      if (char === currentChar) {\n        return \"has-background-success\";\n      } else {\n        return \"has-background-danger\";\n      }\n    } else {\n      return \"\";\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"is-size-1 has-text-centered has-text-primary\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: countDown\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control is-expanded section\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: textInput,\n        disabled: status !== \"started\",\n        type: \"text\",\n        className: \"input\",\n        onKeyDown: handleKeyDown,\n        value: currentInput,\n        onChange: e => setCurrentInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button is-info is-fullwidth\",\n        onClick: start,\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), status === \"started\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-content\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content\",\n            children: words.map((word, i) => {\n              return /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: word.split(\"\").map((char, idx) => /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: getCharClass(i, idx, char),\n                    children: char\n                  }, idx, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 134,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 132,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \" \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 142,\n                  columnNumber: 23\n                }, this)]\n              }, i, true, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }, this), status === \"finished\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"columns\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"column has-text-centered\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"is-size-5\",\n            children: \"Words Per Minute:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"has-text-primary is-size-1\",\n            children: correct\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"column has-text-centered\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"is-size-5\",\n            children: \"Accuracy:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"has-text-info is-size-1\",\n            children: Math.round(correct / (correct + incorrect) * 100) + \"%\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"1hDYf8frxweBcFRATvnB0UC+9N0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/oscarholt/Desktop/Workspace/typing-test/src/App.js"],"names":["useState","useEffect","useRef","randomWords","NUMB_OF_WORDS","SECONDS","App","words","setWords","countDown","setCountDown","currentInput","setCurrentInput","currentWordIndex","setCurrentWordIndex","currentCharIndex","setCurrentCharIndex","currentChar","setCurrentChar","correct","setCorrect","incorrect","setIncorrect","status","setStatus","textInput","generateWords","current","focus","Array","fill","map","start","interval","setInterval","prevCountDown","clearInterval","handleKeyDown","keyCode","key","checkMatch","wordToCompare","doesMatch","trim","getCharClass","wordIdx","charIdx","char","e","target","value","word","i","split","idx","Math","round"],"mappings":"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","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nimport randomWords from \"random-words\";\n\nconst NUMB_OF_WORDS = 200;\nconst SECONDS = 60;\n\nfunction App() {\n  const [words, setWords] = useState([]);\n  const [countDown, setCountDown] = useState(SECONDS);\n  const [currentInput, setCurrentInput] = useState(\"\");\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [currentCharIndex, setCurrentCharIndex] = useState(-1);\n  const [currentChar, setCurrentChar] = useState(\"\");\n  const [correct, setCorrect] = useState(0);\n  const [incorrect, setIncorrect] = useState(0);\n  const [status, setStatus] = useState(\"waiting\");\n  const textInput = useRef(null);\n\n  useEffect(() => {\n    //Sets our words state to be an array of generated words using the random-words package\n    setWords(generateWords());\n  }, []);\n\n  useEffect(() => {\n    if (status === \"started\") {\n      textInput.current.focus();\n    }\n  }, [status]);\n\n  function generateWords() {\n    // Returns an array of random words\n    return new Array(NUMB_OF_WORDS).fill(null).map(() => randomWords());\n  }\n\n  function start() {\n    if (status === \"finished\") {\n      setWords(generateWords());\n      setCurrentWordIndex(0);\n      setCorrect(0);\n      setIncorrect(0);\n      setCurrentCharIndex(-1);\n      setCurrentChar(\"\");\n    }\n    if (status !== \"started\") {\n      setStatus(\"started\");\n      let interval = setInterval(() => {\n        setCountDown((prevCountDown) => {\n          if (prevCountDown === 0) {\n            clearInterval(interval);\n            setStatus(\"finished\");\n            setCurrentInput(\"\");\n            return SECONDS;\n          } else {\n            return prevCountDown - 1;\n          }\n        });\n      }, 1000);\n    }\n  }\n\n  function handleKeyDown({ keyCode, key }) {\n    if (keyCode === 32) {\n      checkMatch();\n      setCurrentInput(\"\");\n      setCurrentWordIndex(currentWordIndex + 1);\n      setCurrentCharIndex(-1);\n    } else if (keyCode === 8) {\n    } else {\n      setCurrentCharIndex(currentCharIndex + 1);\n      setCurrentChar(key);\n    }\n  }\n\n  function checkMatch() {\n    const wordToCompare = words[currentWordIndex];\n    const doesMatch = wordToCompare === currentInput.trim();\n    if (doesMatch) {\n      setCorrect(correct + 1);\n    } else {\n      setIncorrect(incorrect + 1);\n    }\n  }\n\n  function getCharClass(wordIdx, charIdx, char) {\n    if (\n      wordIdx === currentWordIndex &&\n      charIdx === currentCharIndex &&\n      currentChar &&\n      status != \"finished\"\n    ) {\n      if (char === currentChar) {\n        return \"has-background-success\";\n      } else {\n        return \"has-background-danger\";\n      }\n    } else {\n      return \"\";\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"section\">\n        <div className=\"is-size-1 has-text-centered has-text-primary\">\n          <h2>{countDown}</h2>\n        </div>\n      </div>\n      <div className=\"control is-expanded section\">\n        <input\n          ref={textInput}\n          disabled={status !== \"started\"}\n          type=\"text\"\n          className=\"input\"\n          onKeyDown={handleKeyDown}\n          value={currentInput}\n          onChange={(e) => setCurrentInput(e.target.value)}\n        />\n      </div>\n      <div className=\"section\">\n        <button className=\"button is-info is-fullwidth\" onClick={start}>\n          Start\n        </button>\n      </div>\n      {status === \"started\" && (\n        <div className=\"section\">\n          <div className=\"card\">\n            <div className=\"card-content\">\n              <div className=\"content\">\n                {words.map((word, i) => {\n                  return (\n                    <span key={i}>\n                      <span>\n                        {word.split(\"\").map((char, idx) => (\n                          <span\n                            className={getCharClass(i, idx, char)}\n                            key={idx}\n                          >\n                            {char}\n                          </span>\n                        ))}\n                      </span>\n                      <span> </span>\n                    </span>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n      {status === \"finished\" && (\n        <div className=\"section\">\n          <div className=\"columns\">\n            <div className=\"column has-text-centered\">\n              <p className=\"is-size-5\">Words Per Minute:</p>\n              <p className=\"has-text-primary is-size-1\">{correct}</p>\n            </div>\n            <div className=\"column has-text-centered\">\n              <p className=\"is-size-5\">Accuracy:</p>\n              <p className=\"has-text-info is-size-1\">\n                {Math.round((correct / (correct + incorrect)) * 100) + \"%\"}\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}